#!/bin/bash
# Description
#   Enable packages matching a regular expression in profiles matching a regular expression.
#
# Syntax:
#   $0 repoName packageRegex profileNameRegex
#     repoName is the named repository. (found with repoList)
#     packageRegex is a regular expression to match packages found with packageList.
#     profileNameRegex is a regular expression to match profiles found with profileList.
#
# Examples:
#   Enables a package called something in the commandLine profile.
#     $0 mass "^something$" "^commandLine$"
#
#   Enables all packages in the commandLine profile.
#     $0 mass ".*" "^commandLine$"
#
#   Enables all packages in all profiles.
#     $0 mass ".*" ".*"


requiredParms="$3"
. `dirname $0`/libs/includeLibs.sh
. "$libDir"/packages.sh

repoName="$1"
packageRegex="$2"
profileNameRegex="$3"

if [ ! -d "$configDir/repos/$repoName" ]; then
	echo "Did not find a repo matching \"$repoName\""
	exit 1
fi

profiles=`$managementTool profileList | grep "$profileNameRegex"`
if [ "$profiles" == '' ]; then
	echo "Did not match any profiles using regex \"$profileNameRegex\""
	exit 1
fi

while read profile; do
	while read package;do
		# TODO test this
		packagePath="$configDir/profiles/$profile/packages/$package"
		profilePath="$configDir/profiles/$profile/packages"
		cd "$profilePath"
		
		if [ -e "$package" ]; then
			echo "Obsolete named package \"$package\" in \"$packagePath\". It should be in the form repoNanme-packageName."
		elif [ ! -e "$repoName-$package" ]; then
			ln -sf "$packagePath" .
			mv "$package" "$repoName-$package"
		fi
	done < <($managementTool repoListPackages $repoName --short | grep "$packageRegex")
done < <(echo "$profiles")

