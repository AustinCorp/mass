#!/bin/bash
# Description
#   Installs a repository from start to finish. **Most users will want this.**
#
# Syntax:
#   $0 repoAddress
#     repoAddress is where to get the repo from.
#
# Examples:
#   Install a github repo.
#     $0 http://github.com/ksandom/something
#
#   Another way to install the same repo.
#     $0 git@github.com:ksandom/something
#
#   How to install a repo that is stored on your local machine.
#     $0 /usr/local/something

requiredParms="$1"
checkoutDir="repoInstall-$$"
. `dirname $0`/libs/includeLibs.sh
. $libDir/getRepo.sh
. $libDir/repoParms.sh
. $libDir/packages.sh
. $libDir/installLibs.sh
repoAddress="$1"

addRepo "$repoAddress" "$checkoutDir"

cd "$configDir/repos/$checkoutDir"

# detect name
name=`repoGetParm "$checkoutDir" name`

if [ "$name" == "" ]; then
	# TODO add the option for the user to specify the parameters.
	echo "The repository at \"$repoAddress\" does not appear to have a name set. You'll need to do this installation manually."
	removeRepo "$checkoutDir"
	exit 1
fi

# detect conflict
if repoExists "$name"; then # clean up and warn
	echo "$scriptName: A repo of name \"$name\" is already installed. Will update." >&2
	removeRepo "$checkoutDir"
	# TODO do update
else
	renameRepo "$checkoutDir" "$name"
fi


# create profile
createProfile "$name"

# enable packages
disablePackage "$name" ".*" ".*"
while read srcRepoName regex; do
	echo enabledPacakge "$srcRepoName" "$regex" "$name"
	enabledPacakge "$srcRepoName" "$regex" "$name"
done < <(repoGetParmPackages "$name")


# create executable
execName=`repoGetParm "$checkoutDir" execName`
if [ ! "$execName" == '' ]; then
	createExec "$execName"
fi
