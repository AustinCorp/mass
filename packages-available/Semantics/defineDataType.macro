# Define a data type. --defineDataType=typeName,defaultTemplate,[moreTemplate],[lessTemplate],description ~ data,semantics

set DefineDataType,dataTypeName,~!Global,defineDataType-0!~
set DefineDataType,defaultTemplate,~!Global,defineDataType-1!~
set DefineDataType,moreTemplate,~!Global,defineDataType-2!~
set DefineDataType,lessTemplate,~!Global,defineDataType-3!~
set DefineDataType,description,~!Global,defineDataType-4!~

# Apply defaults if necessary
setIfNotSet DefineDataType,moreTemplate,~!DefineDataType,defaultTemplate!~
setIfNotSet DefineDataType,lessTemplate,~!DefineDataType,defaultTemplate!~

# Load the collection if it has not been loaded already
retrieveResults Semantics,dataTypes
notIfResult loadStoreVariableFromFile loadStoreFromData Semantics

# Set the details and cleanup
setNested Semantics,dataTypes,~!DefineDataType,dataTypeName!~,dataTypeName,~!DefineDataType,dataTypeName!~
setNested Semantics,dataTypes,~!DefineDataType,dataTypeName!~,defaultTemplate,~!DefineDataType,defaultTemplate!~
setNested Semantics,dataTypes,~!DefineDataType,dataTypeName!~,moreTemplate,~!DefineDataType,moreTemplate!~
setNested Semantics,dataTypes,~!DefineDataType,dataTypeName!~,lessTemplate,~!DefineDataType,lessTemplate!~
setNested Semantics,dataTypes,~!DefineDataType,dataTypeName!~,description,~!DefineDataType,description!~

unsetCategory DefineDataType

retrieveResults Semantics,dataTypes

# Save the result out
registerForEvent Mass,finishGeneral,saveSemantics
